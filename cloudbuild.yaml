steps:
  - name: "gcr.io/$PROJECT_ID/restore_cache"
    id: "cache"
    args:
    - "--bucket=gs://$PROJECT_ID-cache/"
    - "--key=node_modules"
  - name: "gcr.io/cloud-builders/npm"
    id: "install"
    args: ["install"]
    waitFor: ["cache"]
  - name: "gcr.io/cloud-builders/npm"
    id: "test"
    args: ["test"]
    waitFor: ["install"]
  - name: "gcr.io/cloud-builders/npm"
    id: "package"
    args: ["run", "package"]
    waitFor: ["test"]
  - name: "gcr.io/cloud-builders/docker"
    id: "build"
    args: ["build", "-t", "gcr.io/$PROJECT_ID/deliverybot:$SHORT_SHA", "."]
    waitFor: ["package"]
  - name: "gcr.io/$PROJECT_ID/save_cache"
    id: "save"
    waitFor: ["install"]
    args:
    - "--bucket=gs://$PROJECT_ID-cache/"
    - "--key=node_modules"
    - "--path=node_modules"

  - name: gcr.io/cloud-builders/docker
    dir: executors
    args: ["build", "--cache-from", "gcr.io/$PROJECT_ID/helm:latest",
           "-f", "helm/Dockerfile", "-t", "gcr.io/$PROJECT_ID/helm:latest", "."]
  - name: gcr.io/cloud-builders/docker
    dir: executors
    args: ["build", "--cache-from", "gcr.io/$PROJECT_ID/cloud-run:latest",
           "-f", "cloud-run/Dockerfile", "-t", "gcr.io/$PROJECT_ID/cloud-run:latest", "."]

images:
  - "gcr.io/$PROJECT_ID/deliverybot:$SHORT_SHA"
  - "gcr.io/$PROJECT_ID/cloud-run:latest"
  - "gcr.io/$PROJECT_ID/helm:latest"
